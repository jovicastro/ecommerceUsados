# docker-compose.yml

services:
  # Serviço da sua aplicação Node.js
  app:
    build:
      context: . # Usa o Dockerfile na pasta atual (raiz do projeto)
      dockerfile: Dockerfile
    ports:
      # Mapeia a porta do seu computador (host) para a porta DENTRO do container.
      # Ex: Acessar localhost:3000 no seu navegador/Postman irá para a porta 3000 do container.
      # Se o PORT no seu .env for diferente de 3000, ajuste aqui também.
      - "${PORT:-3000}:${PORT:-3000}"
    env_file:
      # Carrega variáveis de ambiente do arquivo .env na raiz do projeto para DENTRO do container app.
      # Isso é uma forma melhor de gerenciar o .env do que copiá-lo na imagem.
      - ./.env
    depends_on:
      # Garante que o serviço 'db' (MySQL) seja iniciado ANTES do serviço 'app'.
      # Nota: 'depends_on' não espera o MySQL estar pronto para aceitar conexões,
      # apenas que o container tenha iniciado. Sua aplicação Node.js pode precisar
      # de lógica de retentativa de conexão se o MySQL demorar para inicializar.
      - db
    networks:
      # Conecta este serviço à rede 'ecommerce-network' definida abaixo.
      - ecommerce-network

  # Serviço do Banco de Dados MySQL
  db:
    image: mysql:5.7 # Usa a imagem oficial do MySQL versão 5.7
    # Você pode usar mysql:8.0 se preferir e se seu schema for compatível.
    # O MySQL 5.7 é o que estava no header do seu script SQL anterior.
    restart: always # Reinicia o container se ele parar
    environment:
      # Estas variáveis são usadas pela imagem do MySQL para inicializar o banco.
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes" # Pode ser "yes", "true", ou "1"
      # MYSQL_ROOT_PASSWORD:  # Você pode omitir ou deixar vazio se MYSQL_ALLOW_EMPTY_PASSWORD="yes"
      MYSQL_DATABASE: ${DB_NAME:-ecommerceusados} # Cria este banco de dados na inicialização
      # MYSQL_USER: ${DB_USER} # Opcional: criar um usuário específico
      # MYSQL_PASSWORD: ${DB_PASSWORD} # Opcional: senha para o usuário específico
    ports:
      # Mapeia a porta do seu computador para a porta do MySQL no container.
      # Ex: localhost:33066 no seu host irá para a porta 3306 do container MySQL.
      # Usar uma porta diferente no host (ex: 33066) evita conflito se você tiver outro MySQL local.
      - "${DB_EXT_PORT:-33066}:3306"
    volumes:
      # Persiste os dados do MySQL em uma pasta no seu computador host.
      # Se o container for removido, os dados não serão perdidos.
      - mysql_data:/var/lib/mysql
      # Opcional: Script de inicialização do banco
      # Se você tiver um arquivo .sql para criar tabelas (como o seu ecommerceusados.sql),
      # você pode montá-lo aqui para ser executado na primeira vez que o container db é criado.
      # - ./database/mysql-init:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network

  phpmyadmin: # Novo serviço para o phpMyAdmin
    image: phpmyadmin/phpmyadmin
    restart: always
    ports:
      - "8081:80" # Acesse o phpMyAdmin em http://localhost:8081 no seu Firefox
    environment:
      PMA_HOST: db     # Nome do seu serviço MySQL no Docker Compose
      PMA_PORT: 3306   # Porta INTERNA do MySQL no container db
      # PMA_USER: root # Opcional, geralmente o padrão é root
      # PMA_PASSWORD:    # Opcional, se a senha do root for vazia
      UPLOAD_LIMIT: 1G # Opcional: aumenta o limite de upload para importar bancos grandes
    depends_on:
      - db            # Inicia depois do serviço db
    networks:
      - ecommerce-network


# Define volumes nomeados (para persistência de dados)
volumes:
  mysql_data: # O Docker gerencia este volume

# Define redes customizadas
networks:
  ecommerce-network: # Uma rede para os containers se comunicarem
    driver: bridge